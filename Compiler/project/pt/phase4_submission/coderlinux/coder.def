	{ Semantic Operations }
	oTempAllocate = 14;
	oTempFree = 15;
	oOperandPushMode = 16; { (16) }
	oOperandChooseMode = 17; { >>16 }
	oOperandPushVariable = 18;
	oOperandPushInteger = 19;
	oOperandPushBoolean = 20;
	oOperandPushJumpCondition = 21; { (15) }
	oOperandChooseJumpCondition = 22; { >>15 }
	oOperandPushString = 23;
	oOperandPushProcedure = 24;
	oOperandPushTrap = 25;
	oOperandPushCaseLow = 26;
	oOperandPushCaseHigh = 27;
	oOperandPushArrayLowerBound = 28;
	oOperandPushArrayUpperBound = 29;
	oOperandPushCopy = 30;
	oOperandPushTemp = 31;
	oOperandSetMode = 32; { (16) }
	oOperandSetLength = 33; { (13) }
	oOperandSetRegnum = 34; { (13) }
	oOperandChooseLength = 35; { >>13 }
	oOperandSetValue = 36; { (13) }
	oOperandChooseValue = 37; { >>13 }
	oOperandChooseManifestValue = 38; { >>13 }
	oOperandIsValueNegative = 39; { >>14 }
	oOperandEnterValueFromCaseTableAddress = 40;
	oOperandEnterValueFromCodeAddress = 41;
	oOperandEnterValueFromStringLength = 42;
	oOperandEnterValueFromDataAreaSize = 43;
	oOperandCompareLeftAndRight = 44; { >>14 }
	oOperandCompareRightAndDest = 45; { >>14 }
	oOperandIsJumpCondition = 46; { >>14 }
	oOperandComplementJumpCondition = 47;
	oOperandAddManifestValues = 48;
	oOperandSubtractManifestValues = 49;
	oOperandMultiplyManifestValues = 50;
	oOperandNegateManifestValue = 51;
	oOperandCompareManifestValues = 52; { >>14 }
	oOperandMergeShuntsWithAddress = 53;
	oOperandMergeShunts = 54;
	oOperandFoldManifestSubscript = 55;
	oOperandSwap = 56;
	oOperandSwapRightAndDest = 57;
	oOperandSwapLeftAndDest = 58;
	oOperandPop = 59;
	oFixPushAddress = 60;
	oFixPushLastAddress = 61;
	oFixSwapAddresses = 62;
	oFixAndFreeShuntList = 63;
	oFixAndFreeFalseBranches = 64;
	oFixForwardBranch = 65;
	oFixPopAddress = 66;
	oEmitProcLabel = 67; { (16) }
	oEmitNone = 68; { (17) }
	oEmitSingle = 69; { (17) }
	oEmitDouble = 70; { (17) }
	oEmitString = 71;
	oEmitStringLength = 72;
	oEmitConditionalForwardBranch = 73;
	oEmitUnconditionalForwardBranch = 74;
	oEmitConditionalBackwardBranch = 75;
	oEmitUnconditionalBackwardBranch = 76;
	oEmitSourceCoordinate = 77;
	oEmitMergeSourceCoordinate = 78;
	oEmitCaseMergeBranch = 79;
	oEmitCaseBranchTable = 80;
	oCasePush = 81;
	oCasePop = 82;
	oCaseEnterTCodeAddress = 83;
	oCaseEnterVariantAddress = 84;
	oCaseEnterMergeAddress = 85;
	oCaseEnterAbortAddress = 86;
	oArrayEnterLowerBound = 87;
	oArrayEnterUpperBound = 88;
	oOptionTestChecking = 89; { >>14 }

	{ Input Tokens }
	tMultiply = 0;
	firstInputToken = 0;
	tDivide = 1;
	tModulus = 2;
	tAdd = 3;
	tSubtract = 4;
	tEQ = 5;
	tNE = 6;
	tGT = 7;
	tGE = 8;
	tLT = 9;
	tLE = 10;
	tAnd = 11;
	tInfixAnd = 12;
	tOr = 13;
	tInfixOr = 14;
	tNegate = 15;
	tNot = 16;
	tChr = 17;
	tOrd = 18;
	tEoln = 19;
	tEOF = 20;
	tVarParm = 21;
	tFetchAddress = 22;
	tFetchInteger = 23;
	tFetchString = 24;
	tFetchBoolean = 25;
	tAssignBegin = 26;
	tAssignAddress = 27;
	tAssignInteger = 28;
	tAssignString = 29;
	tAssignBoolean = 30;
	tStoreParmAddress = 31;
	tStoreParmInteger = 32;
	tStoreParmString = 33;
	tStoreParmBoolean = 34;
	tSubscriptBegin = 35;
	tSubscriptAddress = 36;
	tSubscriptInteger = 37;
	tSubscriptString = 38;
	tSubscriptBoolean = 39;
	tArrayDescriptor = 40;
	tFileDescriptor = 41;
	tIfBegin = 42;
	tIfEnd = 43;
	tCaseBegin = 44;
	tLoopBegin = 45;
	tLoopBreakWhen = 46;
	tCallBegin = 47;
	tParmEnd = 48;
	tProcedureEnd = 49;
	tWriteBegin = 50;
	tReadBegin = 51;
	tTrapBegin = 52;
	tWriteEnd = 53;
	tReadEnd = 54;
	tCaseElse = 55;
	tConcatenate = 56;
	tSubstring = 57;
	tLength = 58;
	tStringEqual = 59;
	tFunctionResult = 60;
	tLiteralAddress = 61;
	firstCompoundToken = 61;
	tLiteralInteger = 62;
	tLiteralBoolean = 63;
	tLiteralString = 64;
	tStringDescriptor = 65;
	tSkipString = 66;
	tIfThen = 67;
	tIfMerge = 68;
	tCaseSelect = 69;
	tCaseMerge = 70;
	tCaseEnd = 71;
	tLoopTest = 72;
	tLoopEnd = 73;
	tSkipProc = 74;
	tCallEnd = 75;
	tLineNumber = 76;
	tTrap = 77;
	lastCompoundToken = 77;
	tEndOfFile = 78;
	lastInputToken = 78;

	{ Output Tokens }

	{ Input/Output Tokens }

	{ Error Codes }
	eDivisionByZero = 10;
	firstErrorCode = 10;
	lastSslErrorCode = 10;

	{ Type Values }
	{ Type 13 }
	minusOne = -1;
	zero = 0;
	null = 0;
	one = 1;
	two = 2;
	four = 4;
	eight = 8;
	ten = 10;
	twelve = 12;
	regAX = 1;
	regBX = 2;
	regCX = 3;
	regDX = 4;
	trHalt = 0;
	trReset = 1;
	trRewrite = 2;
	trRead = 3;
	trReadln = 4;
	trWrite = 5;
	trWriteln = 6;
	trWriteInteger = 8;
	trReadInteger = 10;
	trAssign = 12;
	trSubscriptAbort = 13;
	trCaseAbort = 14;
	trEoln = 15;
	trEof = 16;
	pttrap101 = 101;
	pttrap102 = 102;
	pttrap103 = 103;
	pttrap104 = 104;
	pttrap105 = 105;
	pttrap106 = 106;
	pttrap107 = 107;
	pttrap108 = 108;
	byte = 1;
	word = 2;
	string = 3;
	{ Type 14 }
	no = 0;
	yes = 1;
	{ Type 15 }
	iJalways = -9;
	iJhi = -8;
	iJlos = -7;
	iJge = -6;
	iJlt = -5;
	iJle = -4;
	iJgt = -3;
	iJne = -2;
	iJeq = -1;
	iJnever = 0;
	{ Type 16 }
	mStatic = 1;
	mStaticManifest = 2;
	mTemp = 3;
	mTempIndirect = 4;
	mTempIndirectCaseOffset = 5;
	mStackReg = 6;
	mStack = 7;
	mBaseReg = 8;
	mArgument = 9;
	mManifest = 10;
	mResultReg = 11;
	mRemainderReg = 12;
	mScratchReg1 = 13;
	mScratchReg2 = 14;
	mGlobalBase = 15;
	mLineNum = 16;
	mMainProc = 17;
	mProc = 18;
	mTrap = 19;
	mString = 20;
	mWord = 21;
	{ Type 17 }
	iAdd = 1;
	iCmp = 2;
	iDec = 3;
	iDiv = 4;
	iInc = 5;
	iMul = 6;
	iShl = 7;
	iNeg = 8;
	iSub = 9;
	iMov = 10;
	iPush = 11;
	iPop = 12;
	iLoada = 13;
	iExtend = 14;
	iJmp = 15;
	iCall = 16;
	iReturn = 17;
	iEnter = 18;
	iLeave = 19;
	iGlobl = 20;
	iText = 21;
	iData = 22;
	iWord = 23;
	iSpace = 24;

	{ S/SL Rule Table Addresses } {
	Program = 0;
	EmitProgramPrologue = 7;
	Block = 65;
	EmitProgramEpilogue = 58;
	OperandPopAndFreeTemp = 4009;
	AssignStmt = 399;
	CallStmt = 407;
	IfStmt = 482;
	LoopStmt = 641;
	CaseStmt = 701;
	WriteProc = 844;
	ReadProc = 928;
	TrapStmt = 1019;
	Routine = 204;
	OperandNextParameter = 328;
	EmitMove = 4713;
	OperandAssignStringPopPop = 2488;
	OperandPushExpression = 1137;
	Statements = 343;
	OperandPushVariable = 1377;
	OperandPushExpressionAssignPopPop = 2165;
	OperandConvertJumpConditionToData = 4034;
	OperandForceAddressIntoTemp = 4386;
	OperandForceToStack = 4542;
	OperandPushBooleanControlExpression = 535;
	FoldIfStmt = 576;
	OperandInfixOr = 3948;
	OperandForceToJumpCondition = 540;
	EmitTst = 4747;
	SkipToEndIf = 622;
	SkipToEndLoop = 682;
	OperandFreeTemp = 4022;
	CaseSelect = 729;
	CaseVariant = 732;
	CaseEnd = 740;
	EmitDefaultCaseAbort = 750;
	EmitCaseSubscriptJump = 785;
	OperandForceIntoTemp = 4318;
	OperandSubtractRightFromLeftPop = 3018;
	WriteParameter = 859;
	ReadParameter = 943;
	OperandAssignIntegerPopPop = 3971;
	EmitStringDescriptor = 1374;
	OperandConcatenatePop = 2538;
	OperandSubstringPopPop = 2609;
	OperandLength = 2682;
	OperandStringEqualPop = 2747;
	SaveTempRegsToStack = 3727;
	RestoreTempRegsFromStack = 3759;
	OperandNegate = 2843;
	OperandAddPop = 2921;
	OperandSubtractPop = 3040;
	OperandMultiplyPop = 3191;
	OperandDividePop = 3337;
	OperandModPop = 3463;
	OperandNot = 3944;
	OperandOrPop = 3965;
	OperandEqualPop = 4127;
	OperandGreaterPop = 4202;
	OperandLessPop = 4290;
	OperandChr = 3573;
	OperandOrd = 3636;
	OperandEolnFunction = 3665;
	OperandEofFunction = 3791;
	OperandSubscriptIntegerPop = 1448;
	OperandSubscriptStringPop = 1477;
	OperandSubscriptBooleanPop = 1538;
	OperandSubscriptNonManifestIntegerPop = 1541;
	OperandSubscriptNonManifestStringPop = 1554;
	OperandSubscriptCharPop = 1506;
	OperandSubscriptNonManifestCharPop = 1997;
	OperandCheckedSubscriptNonManifestIntegerPop = 1567;
	OperandUncheckedSubscriptNonManifestIntegerPop = 1851;
	OperandCheckedSubscriptNonManifestStringPop = 1682;
	OperandUncheckedSubscriptNonManifestStringPop = 1924;
	OperandPushArrayUpperBound = 1811;
	EmitCmp = 4657;
	OperandPushArrayLowerBound = 1797;
	EmitSubscriptAbort = 1830;
	OperandCheckedSubscriptNonManifestCharPop = 2010;
	OperandUncheckedSubscriptNonManifestCharPop = 2112;
	OperandAssignBooleanPopPop = 4004;
	OperandNegateAssignPopPop = 2818;
	OperandAddAssignPopPopPop = 2858;
	OperandSubtractAssignPopPopPop = 2998;
	OperandMultiplyAssignPopPopPop = 3083;
	OperandDivideAssignPopPopPop = 3290;
	OperandNotAssignPopPop = 3853;
	OperandAddRightToLeftPop = 2891;
	EmitAdd = 4627;
	OperandForceLeftIntoTemp = 4372;
	EmitSub = 4642;
	OperandMultiplyLeftByRightPop = 3116;
	OperandDivideLeftByRightPop = 3310;
	OperandAssignCharPopPop = 3994;
	OperandPushFalseTemp = 4111;
	OperandPushTrueTemp = 4095;
	OperandPushTempByte = 4533;
	OperandFoldComparisonPopPop = 4294;
	OperandPushTempWord = 4524;
	OperandForceAddressIntoNewTemp = 4450;
	OperandAreLeftAndRightManifest = 4569; >>14
	OperandLeftOrRightIsTemp = 4598; >>14
	}

	{ S/SL Table Parameters }
	sslTblSize = 4782;
	minSslTableValue = -32767;
	maxSslTableValue = 32767;
